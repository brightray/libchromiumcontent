#!/usr/bin/env python

import errno
import os
import shutil
import subprocess


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
DEPOT_TOOLS_DIR = os.path.join(VENDOR_DIR, 'depot_tools')
CHROMIUM_DIR = os.path.join(VENDOR_DIR, 'chromium')
SRC_DIR = os.path.join(CHROMIUM_DIR, 'src')
CHROMIUMCONTENT_DIR = os.path.join(SRC_DIR, 'chromiumcontent')


def main():
    # When running under cygwin, we force executing this script with the
    # standard win32 python binary shipped with Chromium, so it could run under
    # Windows console environment, which is required for installing and using
    # Windows toolchains (this tip comes from gyp_chromium script).
    if sys.platform == 'cygwin':
        python_dir = os.path.join(SRC_DIR, 'third_party', 'python_26')
        env = os.environ.copy()
        env['PATH'] = python_dir + os.pathsep + env.get('PATH', '')
        p = subprocess.Popen(
           [os.path.join(python_dir, 'python.exe')] + sys.argv,
           env=env, shell=False)
        p.communicate()
        return p.returncode

    gclient_sync()
    install_win_toolchain()
    import_win_environment()
    apply_patches()
    copy_gyp_files()
    run_gyp()
    install_win_tool_wrapper()


def gclient_sync():
    ensure_nacl_disabled()
    gclient = os.path.join(DEPOT_TOOLS_DIR, 'gclient.py')
    os.chdir(CHROMIUM_DIR)
    subprocess.check_call([sys.executable, gclient, 'sync', '--revision',
                           'src@{0}'.format(chromium_revision())])


def ensure_nacl_disabled():
    # Disable NaCl. We don't need it, and it requires some very long filepaths
    # which often overrun the Windows file path limit.
    if 'disable_nacl=1' in os.environ.get('GYP_DEFINES', ''):
        return
    os.environ['GYP_DEFINES'] = ' '.join(['disable_nacl=1', os.environ.get('GYP_DEFINES', '')])


def chromium_revision():
    with open(os.path.join(SOURCE_ROOT, 'VERSION'), 'r') as f:
        [key, value] = f.readline().strip().split('=')
        assert key == 'CHROMIUM_REVISION'
        return value


def install_win_toolchain():
    if sys.platform != 'win32':
        return
    target_dir = os.path.join(SOURCE_ROOT, 'win_toolchain')
    if os.path.isdir(target_dir):
        return
    subprocess.check_call([sys.executable,
                           os.path.join(SRC_DIR, 'tools', 'win',
                                        'toolchain', 'toolchain.py'),
                           '--targetdir', target_dir])


def import_win_environment():
    if sys.platform != 'win32':
        return

    env_bat = os.path.join(SOURCE_ROOT, 'win_toolchain', 'env.bat')
    with open(env_bat) as f:
        for line in f:
            if not line.startswith('set '):
                continue
            key, value = line[4:].strip().split('=', 1)
            os.environ[key] = value

    # env.bat sets component=shared_library in the environment. We don't want
    # that.
    os.environ['GYP_DEFINES'] = \
        'windows_sdk_path="{0}"'.format(os.environ['WindowsSDKDir'])


def copy_gyp_files():
    try:
        os.makedirs(CHROMIUMCONTENT_DIR)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
    shutil.copyfile(os.path.join(SOURCE_ROOT, 'chromiumcontent.gyp'),
                    os.path.join(CHROMIUMCONTENT_DIR, 'chromiumcontent.gyp'))


def apply_patches():
    # Applying patches can invoke gclient, which in turn can invoke gyp, so make
    # sure we have our gyp environment set.
    ensure_nacl_disabled()

    subprocess.check_call([sys.executable, os.path.join(SOURCE_ROOT, 'script', 'apply-patches')])


def run_gyp():
    ensure_nacl_disabled()
    os.environ['GYP_GENERATORS'] = 'ninja'

    os.chdir(SOURCE_ROOT)
    gyp = os.path.join(SRC_DIR, 'build', 'gyp_chromium')
    subprocess.check_call([sys.executable, gyp, '-Ichromiumcontent.gypi',
                           '--depth', SRC_DIR,
                           os.path.join(CHROMIUMCONTENT_DIR,
                                        'chromiumcontent.gyp')])


def install_win_tool_wrapper():
    if sys.platform != 'win32':
        return
    for config in ['Debug', 'Release']:
        config_dir = os.path.join(SRC_DIR, 'out', config)
        win_tool = os.path.join(config_dir, 'gyp-win-tool')
        shutil.move(win_tool, '{0}-original'.format(win_tool))
        shutil.copy(os.path.join(SOURCE_ROOT, 'gyp-win-tool-wrapper'), win_tool)


if __name__ == '__main__':
    import sys
    sys.exit(main())
