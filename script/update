#!/usr/bin/env python

import errno
import os
import shutil
import subprocess


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
DEPOT_TOOLS_DIR = os.path.join(VENDOR_DIR, 'depot_tools')
CHROMIUM_DIR = os.path.join(VENDOR_DIR, 'chromium')
SRC_DIR = os.path.join(CHROMIUM_DIR, 'src')
CHROMIUMCONTENT_DIR = os.path.join(SRC_DIR, 'chromiumcontent')


def main():
    write_dot_gclient()
    gclient_sync()
    install_win_toolchain()
    import_win_environment()
    apply_patches()
    copy_gyp_files()
    run_gyp()
    install_win_tool_wrapper()


def write_dot_gclient():
    template = os.path.join(CHROMIUM_DIR, '.gclient.in')
    destination = os.path.join(CHROMIUM_DIR, '.gclient')
    version = chromium_version()
    with open(template) as t:
        with open(destination, 'w') as d:
            for line in t:
                d.write(line.replace('{{VERSION}}', version))


def chromium_version():
    with open(os.path.join(SOURCE_ROOT, 'VERSION')) as f:
        return f.readline().strip()


def gclient_sync():
    ensure_nacl_disabled()
    gclient = os.path.join(DEPOT_TOOLS_DIR, 'gclient.py')
    os.chdir(CHROMIUM_DIR)
    subprocess.check_call([sys.executable, gclient, 'sync'])


def ensure_nacl_disabled():
    # Disable NaCl. We don't need it, and it requires some very long filepaths
    # which often overrun the Windows file path limit.
    if 'disable_nacl=1' in os.environ.get('GYP_DEFINES', ''):
        return
    os.environ['GYP_DEFINES'] = ' '.join(['disable_nacl=1', os.environ.get('GYP_DEFINES', '')])


def install_win_toolchain():
    if sys.platform not in ['win32', 'cygwin']:
        return

    target_dir = os.path.join(SOURCE_ROOT, 'win_toolchain')
    if os.path.isdir(target_dir):
        return

    subprocess.check_call([chromium_python_path(),
                           os.path.join(os.path.relpath(SRC_DIR), 'tools',
                                        'win', 'toolchain', 'toolchain.py'),
                           '--targetdir', os.path.relpath(target_dir)])


def import_win_environment():
    if sys.platform not in ['win32', 'cygwin']:
        return

    env_bat = os.path.join(SOURCE_ROOT, 'win_toolchain', 'env.bat')
    with open(env_bat) as f:
        for line in f:
            if not line.startswith('set '):
                continue
            key, value = line[4:].strip().split('=', 1)
            os.environ[key] = value

    # env.bat sets component=shared_library in the environment. We don't want
    # that.
    os.environ['GYP_DEFINES'] = \
        'windows_sdk_path="{0}"'.format(os.environ['WindowsSDKDir'])


def copy_gyp_files():
    try:
        os.makedirs(CHROMIUMCONTENT_DIR)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise
    shutil.copyfile(os.path.join(SOURCE_ROOT, 'chromiumcontent.gyp'),
                    os.path.join(CHROMIUMCONTENT_DIR, 'chromiumcontent.gyp'))


def apply_patches():
    # Applying patches can invoke gclient, which in turn can invoke gyp, so make
    # sure we have our gyp environment set.
    ensure_nacl_disabled()

    subprocess.check_call([sys.executable, os.path.join(SOURCE_ROOT, 'script', 'apply-patches')])


def run_gyp():
    ensure_nacl_disabled()
    os.environ['GYP_GENERATORS'] = 'ninja'

    os.chdir(SOURCE_ROOT)
    REL_SRC_DIR = os.path.relpath(SRC_DIR)
    REL_CHROMIUMCONTENT_DIR = os.path.relpath(CHROMIUMCONTENT_DIR)

    python = sys.executable
    if sys.platform in ['win32', 'cygwin']:
      python = chromium_python_path()

    # gyp_chromium is executed with win32 python shipped by chromium, so it can
    # not understand POSIX-style paths, to make it work we pass must relative
    # paths to it.
    gyp = os.path.join(REL_SRC_DIR, 'build', 'gyp_chromium')
    subprocess.check_call([python, gyp, '-Ichromiumcontent.gypi',
                           '--depth', REL_SRC_DIR,
                           os.path.join(REL_CHROMIUMCONTENT_DIR,
                                        'chromiumcontent.gyp')])


def install_win_tool_wrapper():
    if sys.platform not in ['win32', 'cygwin']:
        return
    for config in ['Debug', 'Release']:
        config_dir = os.path.join(SRC_DIR, 'out', config)
        win_tool = os.path.join(config_dir, 'gyp-win-tool')
        shutil.move(win_tool, '{0}-original'.format(win_tool))
        shutil.copy(os.path.join(SOURCE_ROOT, 'gyp-win-tool-wrapper'), win_tool)


def chromium_python_path():
    """Returns the win32 python shipped by Chromium."""

    return os.path.join(SRC_DIR, 'third_party', 'python_26', 'python.exe')


if __name__ == '__main__':
    import sys
    sys.exit(main())
