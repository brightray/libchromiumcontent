diff --git a/content/browser/web_contents/web_contents_impl.cc b/content/browser/web_contents/web_contents_impl.cc
index ea0069b..abe25e1 100644
--- a/content/browser/web_contents/web_contents_impl.cc
+++ b/content/browser/web_contents/web_contents_impl.cc
@@ -1563,6 +1563,12 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
   std::string unique_name;
   frame_tree_.root()->SetFrameName(params.main_frame_name, unique_name);
 
+  if (params.view && params.delegate_view) {
+    view_.reset(params.view);
+    render_view_host_delegate_view_ = params.delegate_view;
+  }
+
+  if (!view_) {
   WebContentsViewDelegate* delegate =
       GetContentClient()->browser()->GetWebContentsViewDelegate(this);
 
@@ -1579,6 +1585,7 @@ void WebContentsImpl::Init(const WebContents::CreateParams& params) {
                                          std::move(view_),
                                          &render_view_host_delegate_view_));
   }
+  }  // !view_
   CHECK(render_view_host_delegate_view_);
   CHECK(view_.get());
 
@@ -4874,6 +4881,7 @@ void WebContentsImpl::RendererUnresponsive(
   // We might have been waiting for both beforeunload and unload ACK.
   // Check if tab is to be unloaded first.
   if (rfhi->IsWaitingForUnloadACK()) {
+#if 0
     // Hang occurred while firing the unload handler.
     // Pretend the handler fired so tab closing continues as if it had.
     GetRenderViewHost()->set_sudden_termination_allowed(true);
@@ -4885,6 +4893,7 @@ void WebContentsImpl::RendererUnresponsive(
     // to recover. Pretend the unload listeners have all fired and close
     // the tab.
     Close();
+#endif
     return;
   }
 
diff --git a/content/public/browser/web_contents.h b/content/public/browser/web_contents.h
index 041c883..d897408 100644
--- a/content/public/browser/web_contents.h
+++ b/content/public/browser/web_contents.h
@@ -59,9 +59,11 @@ class PageState;
 class RenderFrameHost;
 class RenderProcessHost;
 class RenderViewHost;
+class RenderViewHostDelegateView;
 class RenderWidgetHost;
 class RenderWidgetHostView;
 class WebContentsDelegate;
+class WebContentsView;
 struct CustomContextMenuContext;
 struct DropData;
 struct Manifest;
@@ -162,6 +164,10 @@ class WebContents : public PageNavigator,
     // Note that the pre-created renderer process may not be used if the first
     // navigation requires a dedicated or privileged process, such as a WebUI.
     bool initialize_renderer;
+
+    // Optionally specify the view and delegate view.
+    content::WebContentsView* view = nullptr;
+    content::RenderViewHostDelegateView* delegate_view = nullptr;
   };
 
   // Creates a new WebContents.
