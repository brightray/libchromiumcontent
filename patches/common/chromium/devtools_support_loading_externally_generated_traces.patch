From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alexei Filippov <alph@chromium.org>
Date: Tue, 20 Mar 2018 01:28:13 +0000
Subject: DevTools: Support loading externally generated traces.

- Improve auto selection of process/thread when TracingStartedInPage event is missing.
- Allow JS samples be attributed to V8.Execute event.
- Allow traces with no Chrome's toplevel event category.

Change-Id: I8a46551041020a665edd27ee4a0cb10667076900
Reviewed-on: https://chromium-review.googlesource.com/964932
Reviewed-by: Andrey Kosyakov <caseq@chromium.org>
Commit-Queue: Alexei Filippov <alph@chromium.org>
Cr-Commit-Position: refs/heads/master@{#544251}

diff --git a/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineJSProfile.js b/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineJSProfile.js
index aaacba625340bc270837ea7f44478f499a4a982d..d544dd72eded89ec69c7be7abcec5ff8abb09f5f 100644
--- a/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineJSProfile.js
+++ b/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineJSProfile.js
@@ -69,6 +69,7 @@ TimelineModel.TimelineJSProfileProcessor = class {
         case TimelineModel.TimelineModel.RecordType.EvaluateScript:
         case TimelineModel.TimelineModel.RecordType.EvaluateModule:
         case TimelineModel.TimelineModel.RecordType.EventDispatch:
+        case TimelineModel.TimelineModel.RecordType.V8Execute:
           return true;
       }
       return false;
@@ -199,10 +200,8 @@ TimelineModel.TimelineJSProfileProcessor = class {
     }
 
     const firstTopLevelEvent = events.find(SDK.TracingModel.isTopLevelEvent);
-    if (firstTopLevelEvent) {
-      TimelineModel.TimelineModel.forEachEvent(
-          events, onStartEvent, onEndEvent, onInstantEvent, firstTopLevelEvent.startTime);
-    }
+    const startTime = firstTopLevelEvent ? firstTopLevelEvent.startTime : 0;
+    TimelineModel.TimelineModel.forEachEvent(events, onStartEvent, onEndEvent, onInstantEvent, startTime);
     return jsFrameEvents;
   }
 
diff --git a/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineModel.js b/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineModel.js
index 244a0a75148559efef01d24a6f662b9a1bf0136e..6580f066a3488092ff439d5098f513e205820b1c 100644
--- a/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineModel.js
+++ b/third_party/WebKit/Source/devtools/front_end/timeline_model/TimelineModel.js
@@ -283,11 +283,12 @@ TimelineModel.TimelineModel = class {
    */
   _makeMockPageMetadataEvent(tracingModel) {
     const rendererMainThreadName = TimelineModel.TimelineModel.RendererMainThreadName;
-    // FIXME: pick up the first renderer process for now.
-    const process = tracingModel.sortedProcesses().filter(function(p) {
-      return p.threadByName(rendererMainThreadName);
-    })[0];
-    const thread = process && process.threadByName(rendererMainThreadName);
+    // TODO(alph): Support selection of process and thread.
+    const processes = tracingModel.sortedProcesses();
+    const process = processes.find(p => !!p.threadByName(rendererMainThreadName)) || processes[0];
+    if (!process)
+      return null;
+    const thread = process.threadByName(rendererMainThreadName) || process.sortedThreads()[0];
     if (!thread)
       return null;
     const pageMetaEvent = new SDK.TracingModel.Event(
@@ -1138,6 +1139,7 @@ TimelineModel.TimelineModel.RecordType = {
   JitCodeAdded: 'JitCodeAdded',
   JitCodeMoved: 'JitCodeMoved',
   ParseScriptOnBackground: 'v8.parseOnBackground',
+  V8Execute: 'V8.Execute',
 
   UpdateCounters: 'UpdateCounters',
 
