diff --git a/src/builtins/builtins-collections-gen.cc b/src/builtins/builtins-collections-gen.cc
index 3cb20cd8df..acb4c949ae 100644
--- a/src/builtins/builtins-collections-gen.cc
+++ b/src/builtins/builtins-collections-gen.cc
@@ -302,10 +302,11 @@ TF_BUILTIN(MapConstructor, CollectionsBuiltinsAssembler) {
 
     BIND(&if_notobject);
     {
-      Node* const exception = MakeTypeError(
-          MessageTemplate::kIteratorValueNotAnObject, context, next_value);
-      var_exception.Bind(exception);
-      Goto(&if_exception);
+      Node* ret = CallRuntime(
+          Runtime::kThrowTypeError, context,
+          SmiConstant(MessageTemplate::kIteratorValueNotAnObject), next_value);
+      GotoIfException(ret, &if_exception, &var_exception);
+      Unreachable();
     }
   }
 
diff --git a/test/inspector/debugger/caught-uncaught-exceptions-expected.txt b/test/inspector/debugger/caught-uncaught-exceptions-expected.txt
index b784fa549e..9c40b1c556 100644
--- a/test/inspector/debugger/caught-uncaught-exceptions-expected.txt
+++ b/test/inspector/debugger/caught-uncaught-exceptions-expected.txt
@@ -3,3 +3,11 @@ paused in throwCaught
 uncaught: false
 paused in throwUncaught
 uncaught: true
+paused in throwInPromiseCaught
+uncaught: false
+paused in promiseUncaught
+uncaught: true
+paused in throwInMapConstructor
+uncaught: true
+paused in throwInAsyncIterator
+uncaught: true
\ No newline at end of file
diff --git a/test/inspector/debugger/caught-uncaught-exceptions.js b/test/inspector/debugger/caught-uncaught-exceptions.js
index 38b622d3db..b7c4bd4ab7 100644
--- a/test/inspector/debugger/caught-uncaught-exceptions.js
+++ b/test/inspector/debugger/caught-uncaught-exceptions.js
@@ -7,6 +7,19 @@ let {session, contextGroup, Protocol} = InspectorTest.start("Check that inspecto
 contextGroup.addScript(
 `function throwCaught() { try { throw new Error(); } catch (_) {} }
  function throwUncaught() { throw new Error(); }
+ function throwInPromiseCaught() {
+   var reject;
+   new Promise(function(res, rej) { reject = rej; }).catch(() => {});
+   reject();
+ }
+ function throwInPromiseUncaught() {
+   new Promise(function promiseUncaught() { throw new Error(); });
+ }
+ function throwInMapConstructor() { new Map('a'); }
+ function throwInAsyncIterator() {
+   let it = (async function*() {})();
+   it.next.call({});
+ }
  function schedule(f) { setTimeout(f, 0); }
 `);
 
@@ -22,4 +35,12 @@ Protocol.Debugger.onPaused(message => {
 Protocol.Runtime.evaluate({ "expression": "schedule(throwCaught);" })
   .then(() => Protocol.Runtime.evaluate(
       { "expression": "schedule(throwUncaught);" }))
-  .then(() => InspectorTest.completeTest());
+  .then(() => Protocol.Runtime.evaluate(
+      { "expression": "schedule(throwInPromiseCaught);"}))
+  .then(() => Protocol.Runtime.evaluate(
+      { "expression": "schedule(throwInPromiseUncaught);"}))
+  .then(() => Protocol.Runtime.evaluate(
+      { "expression": "schedule(throwInMapConstructor);"}))
+  .then(() => Protocol.Runtime.evaluate(
+      { "expression": "schedule(throwInAsyncIterator);"}))
+ .then(() => InspectorTest.completeTest());
