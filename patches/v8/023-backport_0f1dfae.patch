diff --git a/src/compiler/common-operator.cc b/src/compiler/common-operator.cc
index c48773920d..d92722f701 100644
--- a/src/compiler/common-operator.cc
+++ b/src/compiler/common-operator.cc
@@ -1255,7 +1255,7 @@ bool IsRestOf(Operator const* op) {
   return OpParameter<bool>(op);
 }
 
-const Operator* CommonOperatorBuilder::ObjectState(int object_id,
+const Operator* CommonOperatorBuilder::ObjectState(uint32_t object_id,
                                                    int pointer_slots) {
   return new (zone()) Operator1<ObjectStateInfo>(  // --
       IrOpcode::kObjectState, Operator::kPure,     // opcode
@@ -1265,7 +1265,7 @@ const Operator* CommonOperatorBuilder::ObjectState(int object_id,
 }
 
 const Operator* CommonOperatorBuilder::TypedObjectState(
-    int object_id, const ZoneVector<MachineType>* types) {
+    uint32_t object_id, const ZoneVector<MachineType>* types) {
   return new (zone()) Operator1<TypedObjectStateInfo>(  // --
       IrOpcode::kTypedObjectState, Operator::kPure,     // opcode
       "TypedObjectState",                               // name
diff --git a/src/compiler/common-operator.h b/src/compiler/common-operator.h
index f7638a3cca..9dfb059518 100644
--- a/src/compiler/common-operator.h
+++ b/src/compiler/common-operator.h
@@ -125,7 +125,8 @@ V8_EXPORT_PRIVATE int ParameterIndexOf(const Operator* const);
 const ParameterInfo& ParameterInfoOf(const Operator* const);
 
 struct ObjectStateInfo final : std::pair<uint32_t, int> {
-  using std::pair<uint32_t, int>::pair;
+  ObjectStateInfo(uint32_t object_id, int size)
+      : std::pair<uint32_t, int>(object_id, size) {}
   uint32_t object_id() const { return first; }
   int size() const { return second; }
 };
@@ -134,7 +135,10 @@ size_t hash_value(ObjectStateInfo const& p);
 
 struct TypedObjectStateInfo final
     : std::pair<uint32_t, const ZoneVector<MachineType>*> {
-  using std::pair<uint32_t, const ZoneVector<MachineType>*>::pair;
+  TypedObjectStateInfo(uint32_t object_id,
+                       const ZoneVector<MachineType>* machine_types)
+      : std::pair<uint32_t, const ZoneVector<MachineType>*>(object_id,
+                                                            machine_types) {}
   uint32_t object_id() const { return first; }
   const ZoneVector<MachineType>* machine_types() const { return second; }
 };
@@ -385,8 +389,8 @@ class V8_EXPORT_PRIVATE CommonOperatorBuilder final
                                    SparseInputMask bitmask);
   const Operator* ArgumentsElementsState(bool is_rest);
   const Operator* ArgumentsLengthState(bool is_rest);
-  const Operator* ObjectState(int object_id, int pointer_slots);
-  const Operator* TypedObjectState(int object_id,
+  const Operator* ObjectState(uint32_t object_id, int pointer_slots);
+  const Operator* TypedObjectState(uint32_t object_id,
                                    const ZoneVector<MachineType>* types);
   const Operator* FrameState(BailoutId bailout_id,
                              OutputFrameStateCombine state_combine,
